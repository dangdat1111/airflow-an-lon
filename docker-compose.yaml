# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:3.0.0
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---

#version: "3"

x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider distributions you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  #image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:3.0.0}
  # build: .
  build:
    context: . # Thư mục chứa Dockerfile
    dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
#    AIRFLOW_CONN_CLICKHOUSE: clickhouse+native://${CLICKHOUSE_USER}:${CLICKHOUSE_PASSWORD}@clickhouse:9000/default
#    AIRFLOW_CONN_MONGO: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/${MONGO_INITDB_DATABASE}
    # AIRFLOW_CONN_SPARK: spark://spark:7077
#    AIRFLOW_CONN_POSTGRES_STAGING: postgresql+psycopg2://${POSTGRES_STAGING_USER}:${POSTGRES_STAGING_PASSWORD}@postgres_staging:5432/${POSTGRES_STAGING_DB} # Cập nhật user và password
    
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__STANDALONE_DAG_PROCESSOR: 'true'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__CORE__XCOM_BACKEND: 'airflow.models.xcom.BaseXCom'
    AIRFLOW__CORE__DEFAULT_TIMEZONE: Asia/Ho_Chi_Minh
#    AIR strength__CORE__DEFAULT_TIMEZONE: Asia/Ho_Chi_Minh
    PYTHONPATH: "/opt/airflow:${PYTHONPATH}"
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
#    AIRFLOW__CORE__TEST_CONNECTION: Enabled
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/.env:/opt/airflow/.env #xóa dags ở giữa .env
    - ${AIRFLOW_PROJ_DIR:-.}/include:/opt/airflow/include
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy


services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data_sample
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - ndsnet

#  postgres_staging:
#    image: postgres:13
#    container_name: postgres_staging
#    environment:
#      POSTGRES_USER: ${POSTGRES_STAGING_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_STAGING_PASSWORD}
#      POSTGRES_DB: ${POSTGRES_STAGING_DB}
#    ports:
#      - "5433:5432"  # Port 5433 để tránh xung đột với postgres
#    volumes:
#      - postgres-staging-volume:/var/lib/postgresql/data_sample
#    healthcheck:
#      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_STAGING_USER}" ]
#      interval: 10s
#      retries: 5
#      start_period: 5s
#    restart: always
#    networks:
#      - ndsnet

  mysql:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: 123
      MYSQL_DATABASE: test
      MYSQL_USER: anhquan
      MYSQL_PASSWORD: 123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    restart: always
    networks:
      - ndsnet
    


  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - ndsnet

  airflow-apiserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ndsnet

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ndsnet

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ndsnet

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ndsnet

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ndsnet

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config,include}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config,include}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config,include}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config,include}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config,include}

    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    networks:
      - ndsnet

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    depends_on:
      <<: *airflow-common-depends-on
    networks:
      - ndsnet

#  clickhouse:
#    image: clickhouse/clickhouse-server:24.3.6
#    container_name: clickhouse-server
#    ulimits:
#      nofile:
#        soft: 262144
#        hard: 262144
#    ports:
#      - 8123:8123
#      - 9000:9000
#    environment:
#      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
#      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
#      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
#    volumes:
#      - clickhouse_data:/var/lib/clickhouse
#      - clickhouse_logs:/var/log/clickhouse-server
#    healthcheck:
#      test: ["CMD", "clickhouse-client", "--user", "${CLICKHOUSE_USER}", "--password", "${CLICKHOUSE_PASSWORD}", "--query", "SELECT 1"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 30s
#    restart: always
#    networks:
#      - ndsnet

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ndsnet

#  mongodb:
#    image: mongo:8.0.9
#    container_name: mongodb
#    restart: always
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
#      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
#      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
#    ports:
#      - "27017:27017"
#    volumes:
#      - mongo_data:/data_sample/db
#    healthcheck:
#      test: ["CMD", "mongosh", "-u", "${MONGO_INITDB_ROOT_USERNAME}", "-p", "${MONGO_INITDB_ROOT_PASSWORD}", "--authenticationDatabase", "admin", "--eval", "db.adminCommand('ping')"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 30s
#    networks:
#      - ndsnet

#  spark:
#    image: bitnami/spark:3.5.4
#    environment:
#      - SPARK_MODE=master
#      - SPARK_RPC_AUTHENTICATION_ENABLED=no
#      - SPARK_RPC_ENCRYPTION_ENABLED=no
#      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
#      - SPARK_SSL_ENABLED=no
#      - SPARK_USER=spark
#    ports:
#      - '8081:8080'
#      - '7077:7077'
#    healthcheck:
#      test: [ "CMD", "curl", "--fail", "http://localhost:8081" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    networks:
#      - ndsnet

#   spark-master:
#     image: bitnami/spark:3.5.4
#     container_name: spark-master
#     environment:
#       - SPARK_MODE=master
#       - SPARK_RPC_AUTHENTICATION_ENABLED=no
#       - SPARK_RPC_ENCRYPTION_ENABLED=no
#       - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
#       - SPARK_SSL_ENABLED=no
#       - SPARK_USER=spark
#     ports:
#       - '8081:8080'
#       - '7077:7077'
#     volumes:
#       - spark-data:/bitnami
#       - ${SPARK_PROJ_DIR:-.}/apps:/opt/spark-apps
#       - ${SPARK_PROJ_DIR:-.}/data:/opt/spark-data
#       - ${SPARK_PROJ_DIR:-.}/config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
#       - ${SPARK_PROJ_DIR:-.}/spark-logs:/spark-logs
#       - ${SPARK_PROJ_DIR:-.}/include:/opt/airflow/include
#     networks:
#       - ndsnet
# #    depends_on:
# #      - clickhouse
# #      - mongodb
# #      - postgres_staging

#   spark-worker:
#     image: bitnami/spark:3.5.4
#     environment:
#       - SPARK_MODE=worker
#       - SPARK_MASTER_URL=spark://spark-master:7077
#       - SPARK_WORKER_MEMORY=32G      #<--- adjust accordingly
#       - SPARK_WORKER_CORES=4
#       - SPARK_RPC_AUTHENTICATION_ENABLED=no
#       - SPARK_RPC_ENCRYPTION_ENABLED=no
#       - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
#       - SPARK_SSL_ENABLED=no
#       - SPARK_USER=spark
#     volumes:
#       - spark-data:/bitnami
#       - ${SPARK_PROJ_DIR:-.}/apps:/opt/spark-apps
#       - ${SPARK_PROJ_DIR:-.}/data:/opt/spark-data
#       - ${SPARK_PROJ_DIR:-.}/spark-logs:/spark-logs
#       - ${SPARK_PROJ_DIR:-.}/include:/opt/airflow/include
#     networks:
#       - ndsnet

#   spark-history-server:
#     image: bitnami/spark:3.5.4
#     container_name: spark-history-server
#     environment:
#       - SPARK_NO_DAEMONIZE=true
#       - SPARK_HISTORY_OPTS=-Dspark.history.fs.logDirectory=/spark-logs
#     ports:
#       - '18080:18080'
#     volumes:
#       - spark-data:/bitnami
#       - ${SPARK_PROJ_DIR:-.}/apps:/opt/spark-apps
#       - ${SPARK_PROJ_DIR:-.}/data:/opt/spark-data
#       - ${SPARK_PROJ_DIR:-.}/spark-logs:/spark-logs
#     command: /opt/bitnami/spark/sbin/start-history-server.sh
#     networks:
#       - ndsnet
#     depends_on:
#       - spark-master

#  docker-proxy:
#    image: alpine/socat
#    command: "TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock"
#    ports:
#      - "2376:2375"
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    networks:
#      - ndsnet

volumes:
  postgres-db-volume:
  # postgres-staging-volume:
  # clickhouse_data:
  # clickhouse_logs:
  # mongo_data:
  # spark-data:
  mysql_data:

networks:
  ndsnet:
    driver: bridge



